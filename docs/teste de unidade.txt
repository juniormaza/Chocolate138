TESTES DE UNIDADE

Criar scripts que testem métodos e funções
"Código que testa código"

Muitas pessoas sabem apenas fazer testes individuais

Existe uma forma melhor de executar multiplos testes variando seus valores
É chamado DDT - Data Driven Testing = Test Direcionado por Dados

Normalmente, os teste de unidade são criadoa após a programação

Existe uma forma de organização do trabalho que inverte isso. Primeiro se
completam os testes e depois a programação

Em uma Sprint, na manhã da 1ª segunda-feira, nós conversamos sobre o que será coontruído.
De tarde, o PO e o QA se reunem para definer os critérios de aceitação (Dado-Qunado-Então)
Enquanto isso, os devs montam o esqueleto do código, voltando um resultado fixo

Exemplo:
Na reunião, ficou definido que nesta sprint nos contruiriamos 4 funções de cálculo
de áreas:
 public double calcularQuadrado(double lado){ return 0;}
 public double calcularRetangulo(double largura, double comprimento){ return 0;}
 public double calcularTriangulo(double largura, double comprimento){ return 0;}
 public double calcularCirculo(double raio){ return 0;}

 Nos dias seguintes, conforme os devs completem o código,
 os testes vão começar a passar

 Teste funcionando é uma medida do progresso do software

 No TDD, quando executamosa bateria de testes?
 -R: Uma vez por dia ou quando há um novo build

 Ese processo pode evoluir para um processo de integração contínua (CI)

 Devs                  Passou          Passou
  Ambiente ----> release ----> Ambiente -----> Ambiente
 Desenvolvimento               de Teste        de Produção

             Integração Contínua
                        Entrega Continua (CD) --> Esteira / Pipeline